using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.ApplicationInsights;
using Microsoft.ApplicationInsights.DataContracts;
using Microsoft.ApplicationInsights.Extensibility;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;

namespace FunctionApp
{
    public class HttpTriggered
    {
        private readonly TelemetryClient _telemetryClient;

        public HttpTriggered(TelemetryConfiguration telemetryConfiguration)
        {
            _telemetryClient = new TelemetryClient(telemetryConfiguration);
        }

        [FunctionName("HttpTriggered")]
        public async Task<IActionResult> Run(
            [HttpTrigger(AuthorizationLevel.Function, "get", "post", Route = null)] HttpRequest req,
            ILogger log,
            ExecutionContext executionContext)
        {
            // BeginScope values are added to the trace telemetry as custom properties
            using (log.BeginScope(new Dictionary<string, object>
            {
                {"request method", req.Method}
            }))
            {
                // BeginScope properties is limited to traces generated by ILogger. Use TelemetryInitializers for other telemetry items
                TelemetryEnrichment.SetData("content", await req.ReadAsStringAsync());

                // Two statements below only adds context to the request telemetry and won't work for any other trigger than a HttpTrigger
                var telemetry = req.HttpContext.Features.Get<RequestTelemetry>();
                telemetry.Properties.Add("ContentLength", req.ContentLength.GetValueOrDefault().ToString());

                log.LogInformation("C# HTTP trigger function {FunctionName} processed a request.",
                    executionContext.FunctionName);

                _telemetryClient.TrackEvent("Function invocated");
            }

            await Task.Delay(TimeSpan.FromSeconds(1));

            // Observe exception telemetry in Application Insights
            throw new InvalidOperationException("Simulated exception");

            return new OkObjectResult("Hello World");
        }
    }
}
